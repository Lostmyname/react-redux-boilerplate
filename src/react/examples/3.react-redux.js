import React from 'react';
import { connect } from 'react-redux';

// Building on our previous examples we can use
// the connect function from react-redux to
// bind react and redux

var HelloWorldCounter = (props) => (
  <div>
    <h1>Hello world x{props.count}</h1>
    <button onClick={props.handleClick}>Say hello</button>
  </div>
);

// The first argument we pass to connect() is a
// function that has access to the store's state
// This allows us to create a binding between
// pieces of the application state and our component's props

var mapStateToProps = function (state) {
  var presentationalProps = {
    count: state.helloWorldCount
  }
  return presentationalProps;
}

// The second argument we pass to connect() is a
// function that has access to the store's dispatcher
// This allows us to respond to events happening inside the component
// and accordingly dispatch actions to the Redux store

var mapDispatchToProps = function (dispatch) {
  var eventProps = {
    handleClick: function () {
      dispatch({
        type: 'UPDATE_COUNT'
      });
    }
  };
  return eventProps;
}

// Here's where the magic happens
// connect() maps our 2 arguments to the component's props
// so our presentational component is redux aware
// Additioanlly it handles re-rendering the component
// whenever the state changes

var BoundHelloWorldCounter = connect(
  mapStateToProps,
  mapDispatchToProps
)(HelloWorldCounter);

// Good to know:
// The components generated by connect() behave similarly to
// the example in 1.react.js but they use setState()
// instead of forceUpdate() and implement a performant
// shouldComponentUpdate() optimization which skips rendering
// if the part of the state selected by mapStateToProps()
// has not changed.
